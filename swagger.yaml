openapi: 3.0.3
info:
  title: API Gateway
  description: |
    A robust Express.js API Gateway with Redis session management, JWT authentication, RBAC, and automatic UUID tracking.
    
    ## Features
    - Automatic UUID tracking for all requests
    - Redis-based session management
    - JWT authentication
    - Role-based access control (RBAC)
    - Microservice proxy routing
    - Health monitoring
    
    ## Authentication Flow
    1. All requests automatically get UUID tracking via cookies
    2. Login via `/gateway/test-auth` to create a session
    3. Session stored in Redis with UUID as key
    4. Protected routes validate JWT from Redis using UUID
  version: 1.0.0
  contact:
    name: API Gateway Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://10.1.4.14:3000
    description: Production server

tags:
  - name: Health & Status
    description: Health check and status endpoints
  - name: Authentication
    description: Authentication and session management
  - name: Gateway Management
    description: Gateway configuration and routing

paths:
  /health:
    get:
      tags:
        - Health & Status
      summary: Health check
      description: Check if the API Gateway is running and healthy
      responses:
        '200':
          description: Gateway is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                  gateway:
                    type: string
                    example: "running"

  /gateway/test-auth:
    post:
      tags:
        - Authentication
      summary: Create test session
      description: |
        Creates a test authentication session for testing purposes.
        Uses automatic UUID from cookie and stores JWT in Redis.
      responses:
        '200':
          description: Test session created successfully
          headers:
            Set-Cookie:
              description: UUID cookie (if not already set)
              schema:
                type: string
                example: "uuid=abc-123-def-456; HttpOnly; SameSite=lax"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Test session created using automatic UUID"
                  sessionId:
                    type: string
                    example: "abc-123-def-456"
                  user:
                    $ref: '#/components/schemas/User'
                  flow:
                    type: string
                    example: "Global UUID Middleware â†’ Redis Storage"
                  cookieAlreadySet:
                    type: string
                    example: "UUID cookie was set automatically"
        '500':
          description: Failed to create session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /gateway/test-protected:
    get:
      tags:
        - Authentication
      summary: Test protected endpoint
      description: Test endpoint that requires authentication
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Authentication successful!"
                  user:
                    $ref: '#/components/schemas/User'
                  timestamp:
                    type: string
                    format: date-time
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'

  /gateway/routes:
    get:
      tags:
        - Gateway Management
      summary: View route configuration
      description: Shows all configured routes and their middleware
      responses:
        '200':
          description: Route configuration
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Gateway route configuration"
                  routes:
                    type: array
                    items:
                      $ref: '#/components/schemas/RouteConfig'
                  totalRoutes:
                    type: integer
                    example: 4

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: uuid
      description: |
        Authentication via UUID cookie. The cookie contains a UUID that maps to a JWT token stored in Redis.
        
        To authenticate:
        1. Make a request to `/gateway/test-auth` to create a session
        2. The UUID cookie will be automatically set
        3. Use this cookie for subsequent authenticated requests

  schemas:
    User:
      type: object
      properties:
        userId:
          type: string
          example: "test-user-123"
        role:
          type: string
          enum: [user, admin]
          example: "user"
        email:
          type: string
          format: email
          example: "test@example.com"

    RouteConfig:
      type: object
      properties:
        path:
          type: string
          example: "/api/v1/users/**"
        target:
          type: string
          example: "http://10.1.4.19:3001"
        middleware:
          type: array
          items:
            type: string
            enum: [auth, session, rbac, uuid]
          example: ["auth", "session", "rbac"]
        status:
          type: string
          example: "configured"

    Error:
      type: object
      properties:
        error:
          type: string
          example: "Failed to create test session"
        message:
          type: string
          example: "Redis connection failed"

    AuthError:
      type: object
      properties:
        message:
          type: string
          enum:
            - "Unauthorized: No session ID found."
            - "Unauthorized: Session not found or expired."
            - "Unauthorized: Invalid session token."
          example: "Unauthorized: Session not found or expired."
